window.initMap = function(){

    console.log("initializing map...")
    const map = new google.maps.Map(document.getElementById('map-canvas'), {
        center: { lat: 12.3157, lng: 123.8854 },
        mapTypeId: 'terrain',
        scrollwheel: false,
        zoom: 6
    });

    const MapUtilityService = MapUtilityServiceFactory(map);

    angular.module('twitplot', ['ngSanitize'])
        .factory('MapUtilityService', MapUtilityService)
        .factory('TwitterService', TwitterService)
        .factory('GmapsService', GmapsService)
        .controller('TwitterController', TwitterController);

    angular.bootstrap(document, ['twitplot']);

}

const MapUtilityServiceFactory = map => () => ({
    putCircle: location => {
        var cityCircle = new google.maps.Circle({
            strokeColor: '#FF0000',
            strokeOpacity: 0.8,
            strokeWeight: 2,
            fillColor: '#FF0000',
            fillOpacity: 0.35,
            map: map,
            center: { lat: location.lat, lng: location.lng },
            radius: 50000/map.zoom
        });

    }
});

------------------

export default ['$scope', '$q', 'TwitterService', 'GmapsService', function($scope, $q, TwitterService, GmapsService) {

    $scope.search = [];
    $scope.queries = [];

    TwitterService.initialize();

    $scope.getSearchResults = function(query){
        TwitterService.searchTweets(query).then(function(data){
            $scope.search = data.statuses;
            console.log(data.statuses);
            //$scope.plotTweets();
        }, function(){

        });
    }

    $scope.newSearch = function(){

    }

    $scope.plotTweets = function(){
        for(var i = 0; i < $scope.search.length; i++){
            //console.log($scope.search[i].user.location);
            GmapsService.plotAddress($scope.search[i].user.location);
        }
    }

    $scope.updateSearch = function(){
        $scope.search = [];
        $scope.getSearchResults($scope.searchTerm);
    }

    //if the user is a returning user, retrieve the tweets
    if (TwitterService.isReady()) {
        $scope.connectedTwitter = true;
    }
    else{
        //else, authenticate the user then retrieve the tweets
        TwitterService.connectTwitter().then(function() {
            console.log("Successully connected to Twitter.");
            if (TwitterService.isReady()) {
                //if the authorization is successful, hide the connect button and display the tweets
                $scope.connectedTwitter = true;
            } else {
                console.log('Error establishing connection to Twitter.');
            }
        });
    }
}];

---------------

export default ['$q', function($q) {

    var authorizationResult = false;

    return {
        initialize: function() {
            //initialize OAuth.io with public key of the application
            OAuth.initialize('5ySzGcSOfHjE7ouSylKxT35iklE', {
                cache: true
            });
            //try to create an authorization result when the page loads,
            //this means a returning user won't have to click the twitter button again
            authorizationResult = OAuth.create("twitter");
        },
        isReady: function() {
            return (authorizationResult);
        },
        connectTwitter: function() {
            var deferred = $q.defer();
            OAuth.popup("twitter", {
                cache: true
            }, function(error, result) {
                // cache means to execute the callback if the tokens are already present
                if (!error) {
                    authorizationResult = result;
                    deferred.resolve();
                } else {
                    //do something if there's an error

                }
            });
            return deferred.promise;
        },
        clearCache: function() {
            OAuth.clearCache('twitter');
            authorizationResult = false;
        },
        searchTweets: function(query){
            var deferred = $q.defer();
            var url = '/1.1/search/tweets.json?q=' + query + '&count=20';
            var promise = authorizationResult.get(url).done(function(data) {
                deferred.resolve(data);
            }).fail(function(err) {
                deferred.reject(err);
            });
            return deferred.promise;
        }
    }
}]

--------------------------

export default ['$q', '$http', function($q, $http) {

    return {
        plotAddress: function(address) {
            if(!address) {
                console.log('no value for address paramter.');
                return;
            }
            $http({
                mathod: 'GET',
                url: 'https://maps.googleapis.com/maps/api/geocode/json?address=' + address
                + '&key=AIzaSyA-cq1BDG40iEVQG3Bm6rCc5X2yMSvlYPc'
            }).then(function successCallback(response){
                //console.log(response.data.results[0].geometry.location);
                try{
                    //MapUtilityService.putCircle(response.data.results[0].geometry.location);
                }
                catch(e){
                    //unable to geocode address
                    console.log(e);
                }

            }, function errorCallback(response){

            });
        }
    }
}]

------------------

const MapUtilityServiceFactory = map => () => ({
    putCircle: location => {
        var cityCircle = new google.maps.Circle({
            strokeColor: '#FF0000',
            strokeOpacity: 0.8,
            strokeWeight: 2,
            fillColor: '#FF0000',
            fillOpacity: 0.35,
            map: map,
            center: { lat: location.lat, lng: location.lng },
            radius: 50000/map.zoom
        });
    }
});

                let rgeocode = GmapsService. reverseGeocode($scope.tweets[i].geo.coordinates[0], $scope.tweets[i].geo.coordinates[1]);
                /*tweet = { tweet: $scope.tweets[i], location: {
                    formatted_address: rgeocode.formatted_address,
                    lat: rgeocode.geometry.location.lat,
                    lng: rgeocode.geometry.location.lng
                } };
                */
                //GmapsService.plot(window.map, ...$scope.tweets[i].geo.coordinates);